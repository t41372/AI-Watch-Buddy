"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerTwitch"],{

/***/ "(app-pages-browser)/./node_modules/twitch-video-element/dist/react.js":
/*!*********************************************************!*\
  !*** ./node_modules/twitch-video-element/dist/react.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ react_default)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _twitch_video_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./twitch-video-element.js */ \"(app-pages-browser)/./node_modules/twitch-video-element/dist/twitch-video-element.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ // dist/react.ts\n\n\n// ../../node_modules/ce-la-react/dist/ce-la-react.js\nvar reservedReactProps = /* @__PURE__ */ new Set([\n    \"style\",\n    \"children\",\n    \"ref\",\n    \"key\",\n    \"suppressContentEditableWarning\",\n    \"suppressHydrationWarning\",\n    \"dangerouslySetInnerHTML\"\n]);\nvar reactPropToAttrNameMap = {\n    className: \"class\",\n    htmlFor: \"for\"\n};\nfunction defaultToAttributeName(propName) {\n    return propName.toLowerCase();\n}\nfunction defaultToAttributeValue(propValue) {\n    if (typeof propValue === \"boolean\") return propValue ? \"\" : void 0;\n    if (typeof propValue === \"function\") return void 0;\n    if (typeof propValue === \"object\" && propValue !== null) return void 0;\n    return propValue;\n}\nfunction createComponent(param) {\n    let { react: React2, tagName, elementClass, events, displayName, defaultProps, toAttributeName = defaultToAttributeName, toAttributeValue = defaultToAttributeValue } = param;\n    var _s = $RefreshSig$();\n    const IS_REACT_19_OR_NEWER = Number.parseInt(React2.version) >= 19;\n    const ReactComponent = React2.forwardRef(_s((props, ref)=>{\n        _s();\n        var _a, _b;\n        const elementRef = React2.useRef(null);\n        const prevElemPropsRef = React2.useRef(/* @__PURE__ */ new Map());\n        const eventProps = {};\n        const attrs = {};\n        const reactProps = {};\n        const elementProps = {};\n        for (const [k, v] of Object.entries(props)){\n            if (reservedReactProps.has(k)) {\n                reactProps[k] = v;\n                continue;\n            }\n            var _reactPropToAttrNameMap_k;\n            const attrName = toAttributeName((_reactPropToAttrNameMap_k = reactPropToAttrNameMap[k]) !== null && _reactPropToAttrNameMap_k !== void 0 ? _reactPropToAttrNameMap_k : k);\n            var _ref;\n            if (k in elementClass.prototype && !(k in ((_ref = (_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) !== null && _ref !== void 0 ? _ref : {})) && !((_b = elementClass.observedAttributes) == null ? void 0 : _b.some((attr)=>attr === attrName))) {\n                elementProps[k] = v;\n                continue;\n            }\n            if (k.startsWith(\"on\")) {\n                eventProps[k] = v;\n                continue;\n            }\n            const attrValue = toAttributeValue(v);\n            if (attrName && attrValue != null) {\n                attrs[attrName] = String(attrValue);\n                if (!IS_REACT_19_OR_NEWER) {\n                    reactProps[attrName] = attrValue;\n                }\n            }\n            if (attrName && IS_REACT_19_OR_NEWER) {\n                const attrValueFromDefault = defaultToAttributeValue(v);\n                if (attrValue !== attrValueFromDefault) {\n                    reactProps[attrName] = attrValue;\n                } else {\n                    reactProps[attrName] = v;\n                }\n            }\n        }\n        if (typeof window !== \"undefined\") {\n            for(const propName in eventProps){\n                const callback = eventProps[propName];\n                const useCapture = propName.endsWith(\"Capture\");\n                var _ref1;\n                const eventName = ((_ref1 = events == null ? void 0 : events[propName]) !== null && _ref1 !== void 0 ? _ref1 : propName.slice(2).toLowerCase()).slice(0, useCapture ? -7 : void 0);\n                React2.useLayoutEffect({\n                    \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                        const eventTarget = elementRef == null ? void 0 : elementRef.current;\n                        if (!eventTarget || typeof callback !== \"function\") return;\n                        eventTarget.addEventListener(eventName, callback, useCapture);\n                        return ({\n                            \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                                eventTarget.removeEventListener(eventName, callback, useCapture);\n                            }\n                        })[\"createComponent.ReactComponent.useLayoutEffect\"];\n                    }\n                }[\"createComponent.ReactComponent.useLayoutEffect\"], [\n                    elementRef == null ? void 0 : elementRef.current,\n                    callback\n                ]);\n            }\n            React2.useLayoutEffect({\n                \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                    if (elementRef.current === null) return;\n                    const newElemProps = /* @__PURE__ */ new Map();\n                    for(const key in elementProps){\n                        setProperty(elementRef.current, key, elementProps[key]);\n                        prevElemPropsRef.current.delete(key);\n                        newElemProps.set(key, elementProps[key]);\n                    }\n                    for (const [key, _value] of prevElemPropsRef.current){\n                        setProperty(elementRef.current, key, void 0);\n                    }\n                    prevElemPropsRef.current = newElemProps;\n                }\n            }[\"createComponent.ReactComponent.useLayoutEffect\"]);\n        }\n        if (typeof window === \"undefined\" && (elementClass == null ? void 0 : elementClass.getTemplateHTML) && (elementClass == null ? void 0 : elementClass.shadowRootOptions)) {\n            const { mode, delegatesFocus } = elementClass.shadowRootOptions;\n            const templateShadowRoot = React2.createElement(\"template\", {\n                shadowrootmode: mode,\n                shadowrootdelegatesfocus: delegatesFocus,\n                dangerouslySetInnerHTML: {\n                    __html: elementClass.getTemplateHTML(attrs, props)\n                }\n            });\n            reactProps.children = [\n                templateShadowRoot,\n                reactProps.children\n            ];\n        }\n        return React2.createElement(tagName, {\n            ...defaultProps,\n            ...reactProps,\n            ref: React2.useCallback({\n                \"createComponent.ReactComponent.useCallback\": (node)=>{\n                    elementRef.current = node;\n                    if (typeof ref === \"function\") {\n                        ref(node);\n                    } else if (ref !== null) {\n                        ref.current = node;\n                    }\n                }\n            }[\"createComponent.ReactComponent.useCallback\"], [\n                ref\n            ])\n        });\n    }, \"9mplyF7vgg8XUtKXUe3PLSYpH8g=\"));\n    ReactComponent.displayName = displayName !== null && displayName !== void 0 ? displayName : elementClass.name;\n    return ReactComponent;\n}\nfunction setProperty(node, name, value) {\n    var _a;\n    node[name] = value;\n    var _ref;\n    if (value == null && name in ((_ref = (_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) !== null && _ref !== void 0 ? _ref : {})) {\n        node.removeAttribute(name);\n    }\n}\n// dist/react.ts\nvar react_default = createComponent({\n    react: react__WEBPACK_IMPORTED_MODULE_0__,\n    tagName: \"twitch-video\",\n    elementClass: _twitch_video_element_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    toAttributeName (propName) {\n        if (propName === \"muted\") return \"\";\n        if (propName === \"defaultMuted\") return \"muted\";\n        return defaultToAttributeName(propName);\n    }\n});\n /*! Bundled license information:\n\nce-la-react/dist/ce-la-react.js:\n  (**\n   * @license\n   * Copyright 2018 Google LLC\n   * SPDX-License-Identifier: BSD-3-Clause\n   *\n   * Modified version of `@lit/react` for vanilla custom elements with support for SSR.\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/twitch-video-element/dist/react.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/twitch-video-element/dist/twitch-video-element.js":
/*!************************************************************************!*\
  !*** ./node_modules/twitch-video-element/dist/twitch-video-element.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ twitch_video_element_default)\n/* harmony export */ });\nconst EMBED_BASE = \"https://player.twitch.tv\";\nconst MATCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/(?:videos?\\/|\\?video=)(\\d+)($|\\?)/;\nconst MATCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nconst PlaybackState = {\n  IDLE: \"Idle\",\n  READY: \"Ready\",\n  BUFFERING: \"Buffering\",\n  PLAYING: \"Playing\",\n  ENDED: \"Ended\"\n};\nconst PlayerCommands = {\n  DISABLE_CAPTIONS: 0,\n  ENABLE_CAPTIONS: 1,\n  PAUSE: 2,\n  PLAY: 3,\n  SEEK: 4,\n  SET_CHANNEL: 5,\n  SET_CHANNEL_ID: 6,\n  SET_COLLECTION: 7,\n  SET_QUALITY: 8,\n  SET_VIDEO: 9,\n  SET_MUTED: 10,\n  SET_VOLUME: 11\n};\nfunction getTemplateHTML(attrs, props = {}) {\n  const iframeAttrs = {\n    src: serializeIframeUrl(attrs, props),\n    frameborder: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    allow: \"accelerometer; fullscreen; autoplay; encrypted-media; picture-in-picture;\",\n    sandbox: \"allow-modals allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox\",\n    scrolling: \"no\"\n  };\n  if (props.config) {\n    iframeAttrs[\"data-config\"] = JSON.stringify(props.config);\n  }\n  return (\n    /*html*/\n    `\n    <style>\n      :host {\n        display: inline-block;\n        min-width: 300px;\n        min-height: 150px;\n        position: relative;\n      }\n      iframe {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n      }\n      :host(:not([controls])) {\n        pointer-events: none;\n      }\n    </style>\n    <iframe${serializeAttributes(iframeAttrs)}></iframe>\n  `\n  );\n}\nfunction serializeIframeUrl(attrs, props) {\n  var _a;\n  if (!attrs.src) return;\n  const videoMatch = attrs.src.match(MATCH_VIDEO);\n  const channelMatch = attrs.src.match(MATCH_CHANNEL);\n  const params = {\n    parent: (_a = globalThis.location) == null ? void 0 : _a.hostname,\n    // ?controls=true is enabled by default in the iframe\n    controls: attrs.controls === \"\" ? null : false,\n    autoplay: attrs.autoplay === \"\" ? null : false,\n    muted: attrs.muted,\n    preload: attrs.preload,\n    ...props.config\n  };\n  if (videoMatch) {\n    const videoId = videoMatch[1];\n    return `${EMBED_BASE}/?video=v${videoId}&${serialize(params)}`;\n  } else if (channelMatch) {\n    const channel = channelMatch[1];\n    return `${EMBED_BASE}/?channel=${channel}&${serialize(params)}`;\n  }\n  return \"\";\n}\nclass TwitchVideoElement extends (globalThis.HTMLElement ?? class {\n}) {\n  static getTemplateHTML = getTemplateHTML;\n  static shadowRootOptions = { mode: \"open\" };\n  static observedAttributes = [\"autoplay\", \"controls\", \"loop\", \"muted\", \"playsinline\", \"preload\", \"src\"];\n  loadComplete = new PublicPromise();\n  #loadRequested;\n  #hasLoaded;\n  #iframe;\n  #playerState = {};\n  #currentTime = 0;\n  #muted = false;\n  #volume = 1;\n  #paused = !this.autoplay;\n  #seeking = false;\n  #readyState = 0;\n  #config = null;\n  constructor() {\n    super();\n    this.#upgradeProperty(\"config\");\n  }\n  get config() {\n    return this.#config;\n  }\n  set config(value) {\n    this.#config = value;\n  }\n  async load() {\n    if (this.#loadRequested) return;\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: \"open\" });\n    }\n    const isFirstLoad = !this.#hasLoaded;\n    if (this.#hasLoaded) {\n      this.loadComplete = new PublicPromise();\n    }\n    this.#hasLoaded = true;\n    await (this.#loadRequested = Promise.resolve());\n    this.#loadRequested = null;\n    this.#readyState = 0;\n    this.dispatchEvent(new Event(\"emptied\"));\n    if (!this.src) {\n      this.shadowRoot.innerHTML = \"\";\n      globalThis.removeEventListener(\"message\", this.#onMessage);\n      return;\n    }\n    this.dispatchEvent(new Event(\"loadstart\"));\n    let iframe = this.shadowRoot.querySelector(\"iframe\");\n    const attrs = namedNodeMapToObject(this.attributes);\n    if (isFirstLoad && iframe) {\n      this.#config = JSON.parse(iframe.getAttribute(\"data-config\") || \"{}\");\n    }\n    if (!(iframe == null ? void 0 : iframe.src) || iframe.src !== serializeIframeUrl(attrs, this)) {\n      this.shadowRoot.innerHTML = getTemplateHTML(attrs, this);\n      iframe = this.shadowRoot.querySelector(\"iframe\");\n    }\n    this.#iframe = iframe;\n    globalThis.addEventListener(\"message\", this.#onMessage);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    switch (attrName) {\n      case \"src\":\n      case \"controls\": {\n        this.load();\n        break;\n      }\n    }\n  }\n  get src() {\n    return this.getAttribute(\"src\");\n  }\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  }\n  get readyState() {\n    return this.#readyState;\n  }\n  get seeking() {\n    return this.#seeking;\n  }\n  get buffered() {\n    var _a, _b;\n    return createTimeRanges(0, ((_b = (_a = this.#playerState.stats) == null ? void 0 : _a.videoStats) == null ? void 0 : _b.bufferSize) ?? 0);\n  }\n  get paused() {\n    if (!this.#playerState.playback) return this.#paused;\n    return this.#playerState.playback === PlaybackState.IDLE;\n  }\n  get ended() {\n    if (!this.#playerState.playback) return false;\n    return this.#playerState.playback === PlaybackState.ENDED;\n  }\n  get duration() {\n    return this.#playerState.duration ?? NaN;\n  }\n  get autoplay() {\n    return this.hasAttribute(\"autoplay\");\n  }\n  set autoplay(val) {\n    if (this.autoplay == val) return;\n    this.toggleAttribute(\"autoplay\", Boolean(val));\n  }\n  get controls() {\n    return this.hasAttribute(\"controls\");\n  }\n  set controls(val) {\n    if (this.controls == val) return;\n    this.toggleAttribute(\"controls\", Boolean(val));\n  }\n  get currentTime() {\n    if (!this.#playerState.currentTime) return this.#currentTime;\n    return this.#playerState.currentTime;\n  }\n  set currentTime(val) {\n    this.#currentTime = val;\n    this.loadComplete.then(() => {\n      this.#sendCommand(PlayerCommands.SEEK, val);\n    });\n  }\n  get defaultMuted() {\n    return this.hasAttribute(\"muted\");\n  }\n  set defaultMuted(val) {\n    this.toggleAttribute(\"muted\", Boolean(val));\n  }\n  get loop() {\n    return this.hasAttribute(\"loop\");\n  }\n  set loop(val) {\n    this.toggleAttribute(\"loop\", Boolean(val));\n  }\n  get muted() {\n    return this.#muted;\n  }\n  set muted(val) {\n    this.#muted = val;\n    this.loadComplete.then(() => {\n      this.#sendCommand(PlayerCommands.SET_MUTED, val);\n    });\n  }\n  get volume() {\n    return this.#volume;\n  }\n  set volume(val) {\n    this.#volume = val;\n    this.loadComplete.then(() => {\n      this.#sendCommand(PlayerCommands.SET_VOLUME, val);\n    });\n  }\n  get playsInline() {\n    return this.hasAttribute(\"playsinline\");\n  }\n  set playsInline(val) {\n    this.toggleAttribute(\"playsinline\", Boolean(val));\n  }\n  play() {\n    this.#paused = false;\n    this.#sendCommand(PlayerCommands.PLAY);\n  }\n  pause() {\n    this.#paused = true;\n    this.#sendCommand(PlayerCommands.PAUSE);\n  }\n  #onMessage = async (event) => {\n    var _a, _b, _c, _d;\n    if (!this.#iframe.contentWindow) return;\n    const { data, source } = event;\n    const isFromEmbedWindow = source === this.#iframe.contentWindow;\n    if (!isFromEmbedWindow) return;\n    if (data.namespace === \"twitch-embed\") {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n      if (data.eventName === \"ready\") {\n        this.dispatchEvent(new Event(\"loadcomplete\"));\n        this.loadComplete.resolve();\n        this.#readyState = 1;\n        this.dispatchEvent(new Event(\"loadedmetadata\"));\n      } else if (data.eventName === \"seek\") {\n        this.#seeking = true;\n        this.dispatchEvent(new Event(\"seeking\"));\n      } else if (data.eventName === \"playing\") {\n        if (this.#seeking) {\n          this.#seeking = false;\n          this.dispatchEvent(new Event(\"seeked\"));\n        }\n        this.#readyState = 3;\n        this.dispatchEvent(new Event(\"playing\"));\n      } else {\n        this.dispatchEvent(new Event(data.eventName));\n      }\n    } else if (data.namespace === \"twitch-embed-player-proxy\" && data.eventName === \"UPDATE_STATE\") {\n      const oldDuration = this.#playerState.duration;\n      const oldCurrentTime = this.#playerState.currentTime;\n      const oldVolume = this.#playerState.volume;\n      const oldMuted = this.#playerState.muted;\n      const oldBuffered = (_b = (_a = this.#playerState.stats) == null ? void 0 : _a.videoStats) == null ? void 0 : _b.bufferSize;\n      this.#playerState = { ...this.#playerState, ...data.params };\n      if (oldDuration !== this.#playerState.duration) {\n        this.dispatchEvent(new Event(\"durationchange\"));\n      }\n      if (oldCurrentTime !== this.#playerState.currentTime) {\n        this.dispatchEvent(new Event(\"timeupdate\"));\n      }\n      if (oldVolume !== this.#playerState.volume || oldMuted !== this.#playerState.muted) {\n        this.dispatchEvent(new Event(\"volumechange\"));\n      }\n      if (oldBuffered !== ((_d = (_c = this.#playerState.stats) == null ? void 0 : _c.videoStats) == null ? void 0 : _d.bufferSize)) {\n        this.dispatchEvent(new Event(\"progress\"));\n      }\n    }\n  };\n  #sendCommand(command, params) {\n    if (!this.#iframe.contentWindow) return;\n    const message = {\n      eventName: command,\n      params,\n      namespace: \"twitch-embed-player-proxy\"\n    };\n    this.#iframe.contentWindow.postMessage(message, EMBED_BASE);\n  }\n  // This is a pattern to update property values that are set before\n  // the custom element is upgraded.\n  // https://web.dev/custom-elements-best-practices/#make-properties-lazy\n  #upgradeProperty(prop) {\n    if (Object.prototype.hasOwnProperty.call(this, prop)) {\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n}\nfunction namedNodeMapToObject(namedNodeMap) {\n  let obj = {};\n  for (let attr of namedNodeMap) {\n    obj[attr.name] = attr.value;\n  }\n  return obj;\n}\nfunction serializeAttributes(attrs) {\n  let html = \"\";\n  for (const key in attrs) {\n    const value = attrs[key];\n    if (value === \"\") html += ` ${escapeHtml(key)}`;\n    else html += ` ${escapeHtml(key)}=\"${escapeHtml(`${value}`)}\"`;\n  }\n  return html;\n}\nfunction escapeHtml(str) {\n  return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/`/g, \"&#x60;\");\n}\nfunction serialize(props) {\n  return String(new URLSearchParams(filterParams(props)));\n}\nfunction filterParams(props) {\n  let p = {};\n  for (let key in props) {\n    let val = props[key];\n    if (val === true || val === \"\") p[key] = true;\n    else if (val === false) p[key] = false;\n    else if (val != null) p[key] = val;\n  }\n  return p;\n}\nclass PublicPromise extends Promise {\n  constructor(executor = () => {\n  }) {\n    let res, rej;\n    super((resolve, reject) => {\n      executor(resolve, reject);\n      res = resolve;\n      rej = reject;\n    });\n    this.resolve = res;\n    this.reject = rej;\n  }\n}\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start == null || end == null || start === 0 && end === 0) {\n    return createTimeRangesObj([[0, 0]]);\n  }\n  return createTimeRangesObj([[start, end]]);\n}\nfunction createTimeRangesObj(ranges) {\n  Object.defineProperties(ranges, {\n    start: {\n      value: (i) => ranges[i][0]\n    },\n    end: {\n      value: (i) => ranges[i][1]\n    }\n  });\n  return ranges;\n}\nif (globalThis.customElements && !globalThis.customElements.get(\"twitch-video\")) {\n  globalThis.customElements.define(\"twitch-video\", TwitchVideoElement);\n}\nvar twitch_video_element_default = TwitchVideoElement;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90d2l0Y2gtdmlkZW8tZWxlbWVudC9kaXN0L3R3aXRjaC12aWRlby1lbGVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixZQUFZLFVBQVUsaUJBQWlCLG1CQUFtQjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGlDQUFpQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVyxXQUFXLFFBQVEsR0FBRyxrQkFBa0I7QUFDakUsSUFBSTtBQUNKO0FBQ0EsY0FBYyxXQUFXLFlBQVksUUFBUSxHQUFHLGtCQUFrQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxnQkFBZ0I7QUFDbEQscUJBQXFCLGdCQUFnQixJQUFJLGNBQWMsTUFBTSxHQUFHO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHNCQUFzQixzQkFBc0Isd0JBQXdCLHdCQUF3Qix3QkFBd0I7QUFDcko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRSIsInNvdXJjZXMiOlsiL1VzZXJzL0V0aGFuTGVlL0Rlc2t0b3AvQWR2WC9BSS1XYXRjaC1CdWRkeS9mcm9udGVuZC9ub2RlX21vZHVsZXMvdHdpdGNoLXZpZGVvLWVsZW1lbnQvZGlzdC90d2l0Y2gtdmlkZW8tZWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFTUJFRF9CQVNFID0gXCJodHRwczovL3BsYXllci50d2l0Y2gudHZcIjtcbmNvbnN0IE1BVENIX1ZJREVPID0gLyg/Ond3d1xcLnxnb1xcLik/dHdpdGNoXFwudHZcXC8oPzp2aWRlb3M/XFwvfFxcP3ZpZGVvPSkoXFxkKykoJHxcXD8pLztcbmNvbnN0IE1BVENIX0NIQU5ORUwgPSAvKD86d3d3XFwufGdvXFwuKT90d2l0Y2hcXC50dlxcLyhbYS16QS1aMC05X10rKSgkfFxcPykvO1xuY29uc3QgUGxheWJhY2tTdGF0ZSA9IHtcbiAgSURMRTogXCJJZGxlXCIsXG4gIFJFQURZOiBcIlJlYWR5XCIsXG4gIEJVRkZFUklORzogXCJCdWZmZXJpbmdcIixcbiAgUExBWUlORzogXCJQbGF5aW5nXCIsXG4gIEVOREVEOiBcIkVuZGVkXCJcbn07XG5jb25zdCBQbGF5ZXJDb21tYW5kcyA9IHtcbiAgRElTQUJMRV9DQVBUSU9OUzogMCxcbiAgRU5BQkxFX0NBUFRJT05TOiAxLFxuICBQQVVTRTogMixcbiAgUExBWTogMyxcbiAgU0VFSzogNCxcbiAgU0VUX0NIQU5ORUw6IDUsXG4gIFNFVF9DSEFOTkVMX0lEOiA2LFxuICBTRVRfQ09MTEVDVElPTjogNyxcbiAgU0VUX1FVQUxJVFk6IDgsXG4gIFNFVF9WSURFTzogOSxcbiAgU0VUX01VVEVEOiAxMCxcbiAgU0VUX1ZPTFVNRTogMTFcbn07XG5mdW5jdGlvbiBnZXRUZW1wbGF0ZUhUTUwoYXR0cnMsIHByb3BzID0ge30pIHtcbiAgY29uc3QgaWZyYW1lQXR0cnMgPSB7XG4gICAgc3JjOiBzZXJpYWxpemVJZnJhbWVVcmwoYXR0cnMsIHByb3BzKSxcbiAgICBmcmFtZWJvcmRlcjogXCIwXCIsXG4gICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgYWxsb3c6IFwiYWNjZWxlcm9tZXRlcjsgZnVsbHNjcmVlbjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgcGljdHVyZS1pbi1waWN0dXJlO1wiLFxuICAgIHNhbmRib3g6IFwiYWxsb3ctbW9kYWxzIGFsbG93LXNjcmlwdHMgYWxsb3ctc2FtZS1vcmlnaW4gYWxsb3ctcG9wdXBzIGFsbG93LXBvcHVwcy10by1lc2NhcGUtc2FuZGJveFwiLFxuICAgIHNjcm9sbGluZzogXCJub1wiXG4gIH07XG4gIGlmIChwcm9wcy5jb25maWcpIHtcbiAgICBpZnJhbWVBdHRyc1tcImRhdGEtY29uZmlnXCJdID0gSlNPTi5zdHJpbmdpZnkocHJvcHMuY29uZmlnKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIC8qaHRtbCovXG4gICAgYFxuICAgIDxzdHlsZT5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBtaW4td2lkdGg6IDMwMHB4O1xuICAgICAgICBtaW4taGVpZ2h0OiAxNTBweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuICAgICAgaWZyYW1lIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG4gICAgICA6aG9zdCg6bm90KFtjb250cm9sc10pKSB7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG4gICAgPGlmcmFtZSR7c2VyaWFsaXplQXR0cmlidXRlcyhpZnJhbWVBdHRycyl9PjwvaWZyYW1lPlxuICBgXG4gICk7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVJZnJhbWVVcmwoYXR0cnMsIHByb3BzKSB7XG4gIHZhciBfYTtcbiAgaWYgKCFhdHRycy5zcmMpIHJldHVybjtcbiAgY29uc3QgdmlkZW9NYXRjaCA9IGF0dHJzLnNyYy5tYXRjaChNQVRDSF9WSURFTyk7XG4gIGNvbnN0IGNoYW5uZWxNYXRjaCA9IGF0dHJzLnNyYy5tYXRjaChNQVRDSF9DSEFOTkVMKTtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHBhcmVudDogKF9hID0gZ2xvYmFsVGhpcy5sb2NhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmhvc3RuYW1lLFxuICAgIC8vID9jb250cm9scz10cnVlIGlzIGVuYWJsZWQgYnkgZGVmYXVsdCBpbiB0aGUgaWZyYW1lXG4gICAgY29udHJvbHM6IGF0dHJzLmNvbnRyb2xzID09PSBcIlwiID8gbnVsbCA6IGZhbHNlLFxuICAgIGF1dG9wbGF5OiBhdHRycy5hdXRvcGxheSA9PT0gXCJcIiA/IG51bGwgOiBmYWxzZSxcbiAgICBtdXRlZDogYXR0cnMubXV0ZWQsXG4gICAgcHJlbG9hZDogYXR0cnMucHJlbG9hZCxcbiAgICAuLi5wcm9wcy5jb25maWdcbiAgfTtcbiAgaWYgKHZpZGVvTWF0Y2gpIHtcbiAgICBjb25zdCB2aWRlb0lkID0gdmlkZW9NYXRjaFsxXTtcbiAgICByZXR1cm4gYCR7RU1CRURfQkFTRX0vP3ZpZGVvPXYke3ZpZGVvSWR9JiR7c2VyaWFsaXplKHBhcmFtcyl9YDtcbiAgfSBlbHNlIGlmIChjaGFubmVsTWF0Y2gpIHtcbiAgICBjb25zdCBjaGFubmVsID0gY2hhbm5lbE1hdGNoWzFdO1xuICAgIHJldHVybiBgJHtFTUJFRF9CQVNFfS8/Y2hhbm5lbD0ke2NoYW5uZWx9JiR7c2VyaWFsaXplKHBhcmFtcyl9YDtcbiAgfVxuICByZXR1cm4gXCJcIjtcbn1cbmNsYXNzIFR3aXRjaFZpZGVvRWxlbWVudCBleHRlbmRzIChnbG9iYWxUaGlzLkhUTUxFbGVtZW50ID8/IGNsYXNzIHtcbn0pIHtcbiAgc3RhdGljIGdldFRlbXBsYXRlSFRNTCA9IGdldFRlbXBsYXRlSFRNTDtcbiAgc3RhdGljIHNoYWRvd1Jvb3RPcHRpb25zID0geyBtb2RlOiBcIm9wZW5cIiB9O1xuICBzdGF0aWMgb2JzZXJ2ZWRBdHRyaWJ1dGVzID0gW1wiYXV0b3BsYXlcIiwgXCJjb250cm9sc1wiLCBcImxvb3BcIiwgXCJtdXRlZFwiLCBcInBsYXlzaW5saW5lXCIsIFwicHJlbG9hZFwiLCBcInNyY1wiXTtcbiAgbG9hZENvbXBsZXRlID0gbmV3IFB1YmxpY1Byb21pc2UoKTtcbiAgI2xvYWRSZXF1ZXN0ZWQ7XG4gICNoYXNMb2FkZWQ7XG4gICNpZnJhbWU7XG4gICNwbGF5ZXJTdGF0ZSA9IHt9O1xuICAjY3VycmVudFRpbWUgPSAwO1xuICAjbXV0ZWQgPSBmYWxzZTtcbiAgI3ZvbHVtZSA9IDE7XG4gICNwYXVzZWQgPSAhdGhpcy5hdXRvcGxheTtcbiAgI3NlZWtpbmcgPSBmYWxzZTtcbiAgI3JlYWR5U3RhdGUgPSAwO1xuICAjY29uZmlnID0gbnVsbDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLiN1cGdyYWRlUHJvcGVydHkoXCJjb25maWdcIik7XG4gIH1cbiAgZ2V0IGNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy4jY29uZmlnO1xuICB9XG4gIHNldCBjb25maWcodmFsdWUpIHtcbiAgICB0aGlzLiNjb25maWcgPSB2YWx1ZTtcbiAgfVxuICBhc3luYyBsb2FkKCkge1xuICAgIGlmICh0aGlzLiNsb2FkUmVxdWVzdGVkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XG4gICAgfVxuICAgIGNvbnN0IGlzRmlyc3RMb2FkID0gIXRoaXMuI2hhc0xvYWRlZDtcbiAgICBpZiAodGhpcy4jaGFzTG9hZGVkKSB7XG4gICAgICB0aGlzLmxvYWRDb21wbGV0ZSA9IG5ldyBQdWJsaWNQcm9taXNlKCk7XG4gICAgfVxuICAgIHRoaXMuI2hhc0xvYWRlZCA9IHRydWU7XG4gICAgYXdhaXQgKHRoaXMuI2xvYWRSZXF1ZXN0ZWQgPSBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgdGhpcy4jbG9hZFJlcXVlc3RlZCA9IG51bGw7XG4gICAgdGhpcy4jcmVhZHlTdGF0ZSA9IDA7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImVtcHRpZWRcIikpO1xuICAgIGlmICghdGhpcy5zcmMpIHtcbiAgICAgIHRoaXMuc2hhZG93Um9vdC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgZ2xvYmFsVGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLiNvbk1lc3NhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwibG9hZHN0YXJ0XCIpKTtcbiAgICBsZXQgaWZyYW1lID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCJpZnJhbWVcIik7XG4gICAgY29uc3QgYXR0cnMgPSBuYW1lZE5vZGVNYXBUb09iamVjdCh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgIGlmIChpc0ZpcnN0TG9hZCAmJiBpZnJhbWUpIHtcbiAgICAgIHRoaXMuI2NvbmZpZyA9IEpTT04ucGFyc2UoaWZyYW1lLmdldEF0dHJpYnV0ZShcImRhdGEtY29uZmlnXCIpIHx8IFwie31cIik7XG4gICAgfVxuICAgIGlmICghKGlmcmFtZSA9PSBudWxsID8gdm9pZCAwIDogaWZyYW1lLnNyYykgfHwgaWZyYW1lLnNyYyAhPT0gc2VyaWFsaXplSWZyYW1lVXJsKGF0dHJzLCB0aGlzKSkge1xuICAgICAgdGhpcy5zaGFkb3dSb290LmlubmVySFRNTCA9IGdldFRlbXBsYXRlSFRNTChhdHRycywgdGhpcyk7XG4gICAgICBpZnJhbWUgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcImlmcmFtZVwiKTtcbiAgICB9XG4gICAgdGhpcy4jaWZyYW1lID0gaWZyYW1lO1xuICAgIGdsb2JhbFRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy4jb25NZXNzYWdlKTtcbiAgfVxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ck5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcbiAgICBzd2l0Y2ggKGF0dHJOYW1lKSB7XG4gICAgICBjYXNlIFwic3JjXCI6XG4gICAgICBjYXNlIFwiY29udHJvbHNcIjoge1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBzcmMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9XG4gIHNldCBzcmModmFsdWUpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcInNyY1wiLCB2YWx1ZSk7XG4gIH1cbiAgZ2V0IHJlYWR5U3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3JlYWR5U3RhdGU7XG4gIH1cbiAgZ2V0IHNlZWtpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3NlZWtpbmc7XG4gIH1cbiAgZ2V0IGJ1ZmZlcmVkKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZXMoMCwgKChfYiA9IChfYSA9IHRoaXMuI3BsYXllclN0YXRlLnN0YXRzKSA9PSBudWxsID8gdm9pZCAwIDogX2EudmlkZW9TdGF0cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmJ1ZmZlclNpemUpID8/IDApO1xuICB9XG4gIGdldCBwYXVzZWQoKSB7XG4gICAgaWYgKCF0aGlzLiNwbGF5ZXJTdGF0ZS5wbGF5YmFjaykgcmV0dXJuIHRoaXMuI3BhdXNlZDtcbiAgICByZXR1cm4gdGhpcy4jcGxheWVyU3RhdGUucGxheWJhY2sgPT09IFBsYXliYWNrU3RhdGUuSURMRTtcbiAgfVxuICBnZXQgZW5kZWQoKSB7XG4gICAgaWYgKCF0aGlzLiNwbGF5ZXJTdGF0ZS5wbGF5YmFjaykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLiNwbGF5ZXJTdGF0ZS5wbGF5YmFjayA9PT0gUGxheWJhY2tTdGF0ZS5FTkRFRDtcbiAgfVxuICBnZXQgZHVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuI3BsYXllclN0YXRlLmR1cmF0aW9uID8/IE5hTjtcbiAgfVxuICBnZXQgYXV0b3BsYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKFwiYXV0b3BsYXlcIik7XG4gIH1cbiAgc2V0IGF1dG9wbGF5KHZhbCkge1xuICAgIGlmICh0aGlzLmF1dG9wbGF5ID09IHZhbCkgcmV0dXJuO1xuICAgIHRoaXMudG9nZ2xlQXR0cmlidXRlKFwiYXV0b3BsYXlcIiwgQm9vbGVhbih2YWwpKTtcbiAgfVxuICBnZXQgY29udHJvbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKFwiY29udHJvbHNcIik7XG4gIH1cbiAgc2V0IGNvbnRyb2xzKHZhbCkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xzID09IHZhbCkgcmV0dXJuO1xuICAgIHRoaXMudG9nZ2xlQXR0cmlidXRlKFwiY29udHJvbHNcIiwgQm9vbGVhbih2YWwpKTtcbiAgfVxuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgaWYgKCF0aGlzLiNwbGF5ZXJTdGF0ZS5jdXJyZW50VGltZSkgcmV0dXJuIHRoaXMuI2N1cnJlbnRUaW1lO1xuICAgIHJldHVybiB0aGlzLiNwbGF5ZXJTdGF0ZS5jdXJyZW50VGltZTtcbiAgfVxuICBzZXQgY3VycmVudFRpbWUodmFsKSB7XG4gICAgdGhpcy4jY3VycmVudFRpbWUgPSB2YWw7XG4gICAgdGhpcy5sb2FkQ29tcGxldGUudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLiNzZW5kQ29tbWFuZChQbGF5ZXJDb21tYW5kcy5TRUVLLCB2YWwpO1xuICAgIH0pO1xuICB9XG4gIGdldCBkZWZhdWx0TXV0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKFwibXV0ZWRcIik7XG4gIH1cbiAgc2V0IGRlZmF1bHRNdXRlZCh2YWwpIHtcbiAgICB0aGlzLnRvZ2dsZUF0dHJpYnV0ZShcIm11dGVkXCIsIEJvb2xlYW4odmFsKSk7XG4gIH1cbiAgZ2V0IGxvb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKFwibG9vcFwiKTtcbiAgfVxuICBzZXQgbG9vcCh2YWwpIHtcbiAgICB0aGlzLnRvZ2dsZUF0dHJpYnV0ZShcImxvb3BcIiwgQm9vbGVhbih2YWwpKTtcbiAgfVxuICBnZXQgbXV0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI211dGVkO1xuICB9XG4gIHNldCBtdXRlZCh2YWwpIHtcbiAgICB0aGlzLiNtdXRlZCA9IHZhbDtcbiAgICB0aGlzLmxvYWRDb21wbGV0ZS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuI3NlbmRDb21tYW5kKFBsYXllckNvbW1hbmRzLlNFVF9NVVRFRCwgdmFsKTtcbiAgICB9KTtcbiAgfVxuICBnZXQgdm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLiN2b2x1bWU7XG4gIH1cbiAgc2V0IHZvbHVtZSh2YWwpIHtcbiAgICB0aGlzLiN2b2x1bWUgPSB2YWw7XG4gICAgdGhpcy5sb2FkQ29tcGxldGUudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLiNzZW5kQ29tbWFuZChQbGF5ZXJDb21tYW5kcy5TRVRfVk9MVU1FLCB2YWwpO1xuICAgIH0pO1xuICB9XG4gIGdldCBwbGF5c0lubGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUoXCJwbGF5c2lubGluZVwiKTtcbiAgfVxuICBzZXQgcGxheXNJbmxpbmUodmFsKSB7XG4gICAgdGhpcy50b2dnbGVBdHRyaWJ1dGUoXCJwbGF5c2lubGluZVwiLCBCb29sZWFuKHZhbCkpO1xuICB9XG4gIHBsYXkoKSB7XG4gICAgdGhpcy4jcGF1c2VkID0gZmFsc2U7XG4gICAgdGhpcy4jc2VuZENvbW1hbmQoUGxheWVyQ29tbWFuZHMuUExBWSk7XG4gIH1cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy4jcGF1c2VkID0gdHJ1ZTtcbiAgICB0aGlzLiNzZW5kQ29tbWFuZChQbGF5ZXJDb21tYW5kcy5QQVVTRSk7XG4gIH1cbiAgI29uTWVzc2FnZSA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBpZiAoIXRoaXMuI2lmcmFtZS5jb250ZW50V2luZG93KSByZXR1cm47XG4gICAgY29uc3QgeyBkYXRhLCBzb3VyY2UgfSA9IGV2ZW50O1xuICAgIGNvbnN0IGlzRnJvbUVtYmVkV2luZG93ID0gc291cmNlID09PSB0aGlzLiNpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICBpZiAoIWlzRnJvbUVtYmVkV2luZG93KSByZXR1cm47XG4gICAgaWYgKGRhdGEubmFtZXNwYWNlID09PSBcInR3aXRjaC1lbWJlZFwiKSB7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMCkpO1xuICAgICAgaWYgKGRhdGEuZXZlbnROYW1lID09PSBcInJlYWR5XCIpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImxvYWRjb21wbGV0ZVwiKSk7XG4gICAgICAgIHRoaXMubG9hZENvbXBsZXRlLnJlc29sdmUoKTtcbiAgICAgICAgdGhpcy4jcmVhZHlTdGF0ZSA9IDE7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJsb2FkZWRtZXRhZGF0YVwiKSk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEuZXZlbnROYW1lID09PSBcInNlZWtcIikge1xuICAgICAgICB0aGlzLiNzZWVraW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInNlZWtpbmdcIikpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmV2ZW50TmFtZSA9PT0gXCJwbGF5aW5nXCIpIHtcbiAgICAgICAgaWYgKHRoaXMuI3NlZWtpbmcpIHtcbiAgICAgICAgICB0aGlzLiNzZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInNlZWtlZFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jcmVhZHlTdGF0ZSA9IDM7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwbGF5aW5nXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoZGF0YS5ldmVudE5hbWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEubmFtZXNwYWNlID09PSBcInR3aXRjaC1lbWJlZC1wbGF5ZXItcHJveHlcIiAmJiBkYXRhLmV2ZW50TmFtZSA9PT0gXCJVUERBVEVfU1RBVEVcIikge1xuICAgICAgY29uc3Qgb2xkRHVyYXRpb24gPSB0aGlzLiNwbGF5ZXJTdGF0ZS5kdXJhdGlvbjtcbiAgICAgIGNvbnN0IG9sZEN1cnJlbnRUaW1lID0gdGhpcy4jcGxheWVyU3RhdGUuY3VycmVudFRpbWU7XG4gICAgICBjb25zdCBvbGRWb2x1bWUgPSB0aGlzLiNwbGF5ZXJTdGF0ZS52b2x1bWU7XG4gICAgICBjb25zdCBvbGRNdXRlZCA9IHRoaXMuI3BsYXllclN0YXRlLm11dGVkO1xuICAgICAgY29uc3Qgb2xkQnVmZmVyZWQgPSAoX2IgPSAoX2EgPSB0aGlzLiNwbGF5ZXJTdGF0ZS5zdGF0cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnZpZGVvU3RhdHMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5idWZmZXJTaXplO1xuICAgICAgdGhpcy4jcGxheWVyU3RhdGUgPSB7IC4uLnRoaXMuI3BsYXllclN0YXRlLCAuLi5kYXRhLnBhcmFtcyB9O1xuICAgICAgaWYgKG9sZER1cmF0aW9uICE9PSB0aGlzLiNwbGF5ZXJTdGF0ZS5kdXJhdGlvbikge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiZHVyYXRpb25jaGFuZ2VcIikpO1xuICAgICAgfVxuICAgICAgaWYgKG9sZEN1cnJlbnRUaW1lICE9PSB0aGlzLiNwbGF5ZXJTdGF0ZS5jdXJyZW50VGltZSkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwidGltZXVwZGF0ZVwiKSk7XG4gICAgICB9XG4gICAgICBpZiAob2xkVm9sdW1lICE9PSB0aGlzLiNwbGF5ZXJTdGF0ZS52b2x1bWUgfHwgb2xkTXV0ZWQgIT09IHRoaXMuI3BsYXllclN0YXRlLm11dGVkKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJ2b2x1bWVjaGFuZ2VcIikpO1xuICAgICAgfVxuICAgICAgaWYgKG9sZEJ1ZmZlcmVkICE9PSAoKF9kID0gKF9jID0gdGhpcy4jcGxheWVyU3RhdGUuc3RhdHMpID09IG51bGwgPyB2b2lkIDAgOiBfYy52aWRlb1N0YXRzKSA9PSBudWxsID8gdm9pZCAwIDogX2QuYnVmZmVyU2l6ZSkpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInByb2dyZXNzXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gICNzZW5kQ29tbWFuZChjb21tYW5kLCBwYXJhbXMpIHtcbiAgICBpZiAoIXRoaXMuI2lmcmFtZS5jb250ZW50V2luZG93KSByZXR1cm47XG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGV2ZW50TmFtZTogY29tbWFuZCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIG5hbWVzcGFjZTogXCJ0d2l0Y2gtZW1iZWQtcGxheWVyLXByb3h5XCJcbiAgICB9O1xuICAgIHRoaXMuI2lmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIEVNQkVEX0JBU0UpO1xuICB9XG4gIC8vIFRoaXMgaXMgYSBwYXR0ZXJuIHRvIHVwZGF0ZSBwcm9wZXJ0eSB2YWx1ZXMgdGhhdCBhcmUgc2V0IGJlZm9yZVxuICAvLyB0aGUgY3VzdG9tIGVsZW1lbnQgaXMgdXBncmFkZWQuXG4gIC8vIGh0dHBzOi8vd2ViLmRldi9jdXN0b20tZWxlbWVudHMtYmVzdC1wcmFjdGljZXMvI21ha2UtcHJvcGVydGllcy1sYXp5XG4gICN1cGdyYWRlUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcywgcHJvcCkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1twcm9wXTtcbiAgICAgIGRlbGV0ZSB0aGlzW3Byb3BdO1xuICAgICAgdGhpc1twcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbmFtZWROb2RlTWFwVG9PYmplY3QobmFtZWROb2RlTWFwKSB7XG4gIGxldCBvYmogPSB7fTtcbiAgZm9yIChsZXQgYXR0ciBvZiBuYW1lZE5vZGVNYXApIHtcbiAgICBvYmpbYXR0ci5uYW1lXSA9IGF0dHIudmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUF0dHJpYnV0ZXMoYXR0cnMpIHtcbiAgbGV0IGh0bWwgPSBcIlwiO1xuICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgIGNvbnN0IHZhbHVlID0gYXR0cnNba2V5XTtcbiAgICBpZiAodmFsdWUgPT09IFwiXCIpIGh0bWwgKz0gYCAke2VzY2FwZUh0bWwoa2V5KX1gO1xuICAgIGVsc2UgaHRtbCArPSBgICR7ZXNjYXBlSHRtbChrZXkpfT1cIiR7ZXNjYXBlSHRtbChgJHt2YWx1ZX1gKX1cImA7XG4gIH1cbiAgcmV0dXJuIGh0bWw7XG59XG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKS5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKS5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKS5yZXBsYWNlKC8nL2csIFwiJmFwb3M7XCIpLnJlcGxhY2UoL2AvZywgXCImI3g2MDtcIik7XG59XG5mdW5jdGlvbiBzZXJpYWxpemUocHJvcHMpIHtcbiAgcmV0dXJuIFN0cmluZyhuZXcgVVJMU2VhcmNoUGFyYW1zKGZpbHRlclBhcmFtcyhwcm9wcykpKTtcbn1cbmZ1bmN0aW9uIGZpbHRlclBhcmFtcyhwcm9wcykge1xuICBsZXQgcCA9IHt9O1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBsZXQgdmFsID0gcHJvcHNba2V5XTtcbiAgICBpZiAodmFsID09PSB0cnVlIHx8IHZhbCA9PT0gXCJcIikgcFtrZXldID0gdHJ1ZTtcbiAgICBlbHNlIGlmICh2YWwgPT09IGZhbHNlKSBwW2tleV0gPSBmYWxzZTtcbiAgICBlbHNlIGlmICh2YWwgIT0gbnVsbCkgcFtrZXldID0gdmFsO1xuICB9XG4gIHJldHVybiBwO1xufVxuY2xhc3MgUHVibGljUHJvbWlzZSBleHRlbmRzIFByb21pc2Uge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvciA9ICgpID0+IHtcbiAgfSkge1xuICAgIGxldCByZXMsIHJlajtcbiAgICBzdXBlcigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgcmVzID0gcmVzb2x2ZTtcbiAgICAgIHJlaiA9IHJlamVjdDtcbiAgICB9KTtcbiAgICB0aGlzLnJlc29sdmUgPSByZXM7XG4gICAgdGhpcy5yZWplY3QgPSByZWo7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpbWVSYW5nZXMoc3RhcnQsIGVuZCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShzdGFydCkpIHtcbiAgICByZXR1cm4gY3JlYXRlVGltZVJhbmdlc09iaihzdGFydCk7XG4gIH0gZWxzZSBpZiAoc3RhcnQgPT0gbnVsbCB8fCBlbmQgPT0gbnVsbCB8fCBzdGFydCA9PT0gMCAmJiBlbmQgPT09IDApIHtcbiAgICByZXR1cm4gY3JlYXRlVGltZVJhbmdlc09iaihbWzAsIDBdXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZXNPYmooW1tzdGFydCwgZW5kXV0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVGltZVJhbmdlc09iaihyYW5nZXMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocmFuZ2VzLCB7XG4gICAgc3RhcnQ6IHtcbiAgICAgIHZhbHVlOiAoaSkgPT4gcmFuZ2VzW2ldWzBdXG4gICAgfSxcbiAgICBlbmQ6IHtcbiAgICAgIHZhbHVlOiAoaSkgPT4gcmFuZ2VzW2ldWzFdXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhbmdlcztcbn1cbmlmIChnbG9iYWxUaGlzLmN1c3RvbUVsZW1lbnRzICYmICFnbG9iYWxUaGlzLmN1c3RvbUVsZW1lbnRzLmdldChcInR3aXRjaC12aWRlb1wiKSkge1xuICBnbG9iYWxUaGlzLmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInR3aXRjaC12aWRlb1wiLCBUd2l0Y2hWaWRlb0VsZW1lbnQpO1xufVxudmFyIHR3aXRjaF92aWRlb19lbGVtZW50X2RlZmF1bHQgPSBUd2l0Y2hWaWRlb0VsZW1lbnQ7XG5leHBvcnQge1xuICB0d2l0Y2hfdmlkZW9fZWxlbWVudF9kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/twitch-video-element/dist/twitch-video-element.js\n"));

/***/ })

}]);