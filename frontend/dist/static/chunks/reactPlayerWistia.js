"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerWistia"],{

/***/ "(app-pages-browser)/./node_modules/super-media-element/super-media-element.js":
/*!*****************************************************************!*\
  !*** ./node_modules/super-media-element/super-media-element.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Events: () => (/* binding */ Events),\n/* harmony export */   SuperAudioElement: () => (/* binding */ SuperAudioElement),\n/* harmony export */   SuperMediaMixin: () => (/* binding */ SuperMediaMixin),\n/* harmony export */   SuperVideoElement: () => (/* binding */ SuperVideoElement),\n/* harmony export */   template: () => (/* binding */ template)\n/* harmony export */ });\n/**\n * Super Media Element\n * Based on https://github.com/muxinc/custom-video-element - Mux - MIT License\n *\n * The goal is to create an element that works just like the video element\n * but can be extended/sub-classed, because native elements cannot be\n * extended today across browsers. Support for extending async loaded video\n * like API's. e.g. video players.\n */\n\n// The onevent like props are weirdly set on the HTMLElement prototype with other\n// generic events making it impossible to pick these specific to HTMLMediaElement.\nconst Events = [\n  'abort',\n  'canplay',\n  'canplaythrough',\n  'durationchange',\n  'emptied',\n  'encrypted',\n  'ended',\n  'error',\n  'loadeddata',\n  'loadedmetadata',\n  'loadstart',\n  'pause',\n  'play',\n  'playing',\n  'progress',\n  'ratechange',\n  'seeked',\n  'seeking',\n  'stalled',\n  'suspend',\n  'timeupdate',\n  'volumechange',\n  'waiting',\n  'waitingforkey',\n  'resize',\n  'enterpictureinpicture',\n  'leavepictureinpicture',\n  'webkitbeginfullscreen',\n  'webkitendfullscreen',\n  'webkitpresentationmodechanged',\n];\n\nconst template = globalThis.document?.createElement('template');\n\nif (template) {\n  template.innerHTML = /*html*/`\n    <style>\n      :host {\n        display: inline-block;\n        line-height: 0;\n      }\n\n      video,\n      audio {\n        max-width: 100%;\n        max-height: 100%;\n        min-width: 100%;\n        min-height: 100%;\n      }\n    </style>\n    <slot></slot>\n  `;\n}\n\n/**\n * @see https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n */\nconst SuperMediaMixin = (superclass, { tag, is }) => {\n\n  const nativeElTest = globalThis.document?.createElement(tag, { is });\n  const nativeElProps = nativeElTest ? getNativeElProps(nativeElTest) : [];\n\n  return class SuperMedia extends superclass {\n    static Events = Events;\n    static template = template;\n    static skipAttributes = [];\n    static #isDefined;\n\n    static get observedAttributes() {\n      SuperMedia.#define();\n\n      // Include any attributes from the custom built-in.\n      const natAttrs = nativeElTest?.constructor?.observedAttributes ?? [];\n\n      return [\n        ...natAttrs,\n        'autopictureinpicture',\n        'disablepictureinpicture',\n        'disableremoteplayback',\n        'autoplay',\n        'controls',\n        'controlslist',\n        'crossorigin',\n        'loop',\n        'muted',\n        'playsinline',\n        'poster',\n        'preload',\n        'src',\n      ];\n    }\n\n    static #define() {\n      if (this.#isDefined) return;\n      this.#isDefined = true;\n\n      const propsToAttrs = new Set(this.observedAttributes);\n      // defaultMuted maps to the muted attribute, handled manually below.\n      propsToAttrs.delete('muted');\n\n      // Passthrough native el functions from the custom el to the native el\n      for (let prop of nativeElProps) {\n        if (prop in this.prototype) continue;\n\n        const type = typeof nativeElTest[prop];\n        if (type == 'function') {\n          // Function\n          this.prototype[prop] = function (...args) {\n            this.#init();\n\n            const fn = () => {\n              if (this.call) return this.call(prop, ...args);\n              return this.nativeEl[prop].apply(this.nativeEl, args);\n            };\n\n            if (this.loadComplete && !this.isLoaded) {\n              return this.loadComplete.then(fn);\n            }\n            return fn();\n          };\n        } else {\n          // Some properties like src, preload, defaultMuted are handled manually.\n\n          // Getter\n          let config = {\n            get() {\n              this.#init();\n\n              let attr = prop.toLowerCase();\n              if (propsToAttrs.has(attr)) {\n                const val = this.getAttribute(attr);\n                return val === null ? false : val === '' ? true : val;\n              }\n\n              return this.get?.(prop) ?? this.nativeEl?.[prop] ?? this.#standinEl[prop];\n            },\n          };\n\n          if (prop !== prop.toUpperCase()) {\n            // Setter (not a CONSTANT)\n            config.set = async function (val) {\n              this.#init();\n\n              let attr = prop.toLowerCase();\n              if (propsToAttrs.has(attr)) {\n                if (val === true || val === false || val == null) {\n                  this.toggleAttribute(attr, Boolean(val));\n                } else {\n                  this.setAttribute(attr, val);\n                }\n                return;\n              }\n\n              if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n\n              if (this.set) {\n                this.set(prop, val);\n                return;\n              }\n\n              this.nativeEl[prop] = val;\n            };\n          }\n\n          Object.defineProperty(this.prototype, prop, config);\n        }\n      }\n    }\n\n    #isInit;\n    #loadComplete;\n    #hasLoaded = false;\n    #isLoaded = false;\n    #nativeEl;\n    #standinEl;\n\n    constructor() {\n      super();\n\n      if (!this.shadowRoot) {\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.append(this.constructor.template.content.cloneNode(true));\n      }\n\n      // If a load method is provided in the child class create a load promise.\n      if (this.load !== SuperMedia.prototype.load) {\n        this.loadComplete = new PublicPromise();\n      }\n\n      // If the custom element is defined before the custom element's HTML is parsed\n      // no attributes will be available in the constructor (construction process).\n      // Wait until initializing in the attributeChangedCallback or\n      // connectedCallback or accessing any properties.\n    }\n\n    get loadComplete() {\n      return this.#loadComplete;\n    }\n\n    set loadComplete(promise) {\n      this.#isLoaded = false;\n      this.#loadComplete = promise;\n      promise?.then(() => {\n        this.#isLoaded = true;\n      });\n    }\n\n    get isLoaded() {\n      return this.#isLoaded;\n    }\n\n    get nativeEl() {\n      return this.#nativeEl\n        ?? this.shadowRoot.querySelector(tag)\n        ?? this.querySelector(tag);\n    }\n\n    set nativeEl(val) {\n      this.#nativeEl = val;\n    }\n\n    get defaultMuted() {\n      return this.hasAttribute('muted');\n    }\n\n    set defaultMuted(val) {\n      this.toggleAttribute('muted', Boolean(val));\n    }\n\n    get src() {\n      return this.getAttribute('src');\n    }\n\n    set src(val) {\n      this.setAttribute('src', `${val}`);\n    }\n\n    get preload() {\n      return this.getAttribute('preload') ?? this.nativeEl?.preload;\n    }\n\n    set preload(val) {\n      this.setAttribute('preload', `${val}`);\n    }\n\n    async #init() {\n      if (this.#isInit) return;\n      this.#isInit = true;\n\n      this.#initStandinEl();\n      this.#initNativeEl();\n\n      for (let prop of nativeElProps)\n        this.#upgradeProperty(prop);\n\n      // Keep some native child elements like track and source in sync.\n      const childMap = new Map();\n      // An unnamed <slot> will be filled with all of the custom element's\n      // top-level child nodes that do not have the slot attribute.\n      const slotEl = this.shadowRoot.querySelector('slot:not([name])');\n      slotEl?.addEventListener('slotchange', () => {\n        const removeNativeChildren = new Map(childMap);\n        slotEl\n          .assignedElements()\n          .filter((el) => ['track', 'source'].includes(el.localName))\n          .forEach(async (el) => {\n            // If the source or track is still in the assigned elements keep it.\n            removeNativeChildren.delete(el);\n            // Re-use clones if possible.\n            let clone = childMap.get(el);\n            if (!clone) {\n              clone = el.cloneNode();\n              childMap.set(el, clone);\n            }\n            if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n            this.nativeEl.append?.(clone);\n          });\n        removeNativeChildren.forEach((el) => el.remove());\n      });\n\n      // The video events are dispatched on the SuperMediaElement instance.\n      // This makes it possible to add event listeners before the element is upgraded.\n      for (let type of this.constructor.Events) {\n        this.shadowRoot.addEventListener?.(type, (evt) => {\n          if (evt.target !== this.nativeEl) return;\n          this.dispatchEvent(new CustomEvent(evt.type, { detail: evt.detail }));\n        }, true);\n      }\n    }\n\n    #upgradeProperty(prop) {\n      // Sets properties that are set before the custom element is upgraded.\n      // https://web.dev/custom-elements-best-practices/#make-properties-lazy\n      if (Object.prototype.hasOwnProperty.call(this, prop)) {\n        const value = this[prop];\n        // Delete the set property from this instance.\n        delete this[prop];\n        // Set the value again via the (prototype) setter on this class.\n        this[prop] = value;\n      }\n    }\n\n    #initStandinEl() {\n      // Neither Chrome or Firefox support setting the muted attribute\n      // after using document.createElement.\n      // Get around this by setting the muted property manually.\n      const dummyEl = document.createElement(tag, { is });\n      dummyEl.muted = this.hasAttribute('muted');\n\n      for (let { name, value } of this.attributes) {\n        dummyEl.setAttribute(name, value);\n      }\n\n      this.#standinEl = {};\n      for (let name of getNativeElProps(dummyEl)) {\n        this.#standinEl[name] = dummyEl[name];\n      }\n\n      // unload dummy video element\n      dummyEl.removeAttribute('src');\n      dummyEl.load();\n    }\n\n    async #initNativeEl() {\n      if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n\n      // If there is no nativeEl by now, create it our bloody selves.\n      if (!this.nativeEl) {\n        const nativeEl = document.createElement(tag, { is });\n        nativeEl.part = tag;\n        this.shadowRoot.append(nativeEl);\n      }\n\n      // Neither Chrome or Firefox support setting the muted attribute\n      // after using document.createElement.\n      // Get around this by setting the muted property manually.\n      this.nativeEl.muted = this.hasAttribute('muted');\n    }\n\n    attributeChangedCallback(attrName, oldValue, newValue) {\n      // Initialize right after construction when the attributes become available.\n      this.#init();\n\n      // Only call loadSrc when the super class has a load method.\n      if (attrName === 'src' && this.load !== SuperMedia.prototype.load) {\n        this.#loadSrc();\n      }\n\n      this.#forwardAttribute(attrName, oldValue, newValue);\n    }\n\n    async #loadSrc() {\n      // The first time we use the Promise created in the constructor.\n      if (this.#hasLoaded) this.loadComplete = new PublicPromise();\n      this.#hasLoaded = true;\n\n      // Wait 1 tick to allow other attributes to be set.\n      await Promise.resolve();\n      await this.load();\n\n      this.loadComplete?.resolve();\n      await this.loadComplete;\n    }\n\n    async #forwardAttribute(attrName, oldValue, newValue) {\n      if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n\n      // Ignore a few that don't need to be passed & skipped attributes.\n      // e.g. src: native element is using MSE and has a blob url as src attribute.\n      if (['id', 'class', ...this.constructor.skipAttributes].includes(attrName)) {\n        return;\n      }\n\n      if (newValue === null) {\n        this.nativeEl.removeAttribute?.(attrName);\n      } else {\n        this.nativeEl.setAttribute?.(attrName, newValue);\n      }\n    }\n\n    connectedCallback() {\n      this.#init();\n    }\n  };\n};\n\nfunction getNativeElProps(nativeElTest) {\n  // Map all native element properties to the custom element\n  // so that they're applied to the native element.\n  // Skipping HTMLElement because of things like \"attachShadow\"\n  // causing issues. Most of those props still need to apply to\n  // the custom element.\n  let nativeElProps = [];\n\n  // Walk the prototype chain up to HTMLElement.\n  // This will grab all super class props in between.\n  // i.e. VideoElement and MediaElement\n  for (\n    let proto = Object.getPrototypeOf(nativeElTest);\n    proto && proto !== HTMLElement.prototype;\n    proto = Object.getPrototypeOf(proto)\n  ) {\n    nativeElProps.push(...Object.getOwnPropertyNames(proto));\n  }\n\n  return nativeElProps;\n}\n\n/**\n * A utility to create Promises with convenient public resolve and reject methods.\n * @return {Promise}\n */\nclass PublicPromise extends Promise {\n  constructor(executor = () => {}) {\n    let res, rej;\n    super((resolve, reject) => {\n      executor(resolve, reject);\n      res = resolve;\n      rej = reject;\n    });\n    this.resolve = res;\n    this.reject = rej;\n  }\n}\n\nconst SuperVideoElement = globalThis.document ? SuperMediaMixin(HTMLElement, { tag: 'video' }) : class {};\n\nconst SuperAudioElement = globalThis.document ? SuperMediaMixin(HTMLElement, { tag: 'audio' }) : class {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/super-media-element/super-media-element.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/wistia-video-element/dist/react.js":
/*!*********************************************************!*\
  !*** ./node_modules/wistia-video-element/dist/react.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ react_default)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _wistia_video_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wistia-video-element.js */ \"(app-pages-browser)/./node_modules/wistia-video-element/dist/wistia-video-element.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ // dist/react.ts\n\n\n// ../../node_modules/ce-la-react/dist/ce-la-react.js\nvar reservedReactProps = /* @__PURE__ */ new Set([\n    \"style\",\n    \"children\",\n    \"ref\",\n    \"key\",\n    \"suppressContentEditableWarning\",\n    \"suppressHydrationWarning\",\n    \"dangerouslySetInnerHTML\"\n]);\nvar reactPropToAttrNameMap = {\n    className: \"class\",\n    htmlFor: \"for\"\n};\nfunction defaultToAttributeName(propName) {\n    return propName.toLowerCase();\n}\nfunction defaultToAttributeValue(propValue) {\n    if (typeof propValue === \"boolean\") return propValue ? \"\" : void 0;\n    if (typeof propValue === \"function\") return void 0;\n    if (typeof propValue === \"object\" && propValue !== null) return void 0;\n    return propValue;\n}\nfunction createComponent(param) {\n    let { react: React2, tagName, elementClass, events, displayName, defaultProps, toAttributeName = defaultToAttributeName, toAttributeValue = defaultToAttributeValue } = param;\n    var _s = $RefreshSig$();\n    const IS_REACT_19_OR_NEWER = Number.parseInt(React2.version) >= 19;\n    const ReactComponent = React2.forwardRef(_s((props, ref)=>{\n        _s();\n        var _a, _b;\n        const elementRef = React2.useRef(null);\n        const prevElemPropsRef = React2.useRef(/* @__PURE__ */ new Map());\n        const eventProps = {};\n        const attrs = {};\n        const reactProps = {};\n        const elementProps = {};\n        for (const [k, v] of Object.entries(props)){\n            if (reservedReactProps.has(k)) {\n                reactProps[k] = v;\n                continue;\n            }\n            var _reactPropToAttrNameMap_k;\n            const attrName = toAttributeName((_reactPropToAttrNameMap_k = reactPropToAttrNameMap[k]) !== null && _reactPropToAttrNameMap_k !== void 0 ? _reactPropToAttrNameMap_k : k);\n            var _ref;\n            if (k in elementClass.prototype && !(k in ((_ref = (_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) !== null && _ref !== void 0 ? _ref : {})) && !((_b = elementClass.observedAttributes) == null ? void 0 : _b.some((attr)=>attr === attrName))) {\n                elementProps[k] = v;\n                continue;\n            }\n            if (k.startsWith(\"on\")) {\n                eventProps[k] = v;\n                continue;\n            }\n            const attrValue = toAttributeValue(v);\n            if (attrName && attrValue != null) {\n                attrs[attrName] = String(attrValue);\n                if (!IS_REACT_19_OR_NEWER) {\n                    reactProps[attrName] = attrValue;\n                }\n            }\n            if (attrName && IS_REACT_19_OR_NEWER) {\n                const attrValueFromDefault = defaultToAttributeValue(v);\n                if (attrValue !== attrValueFromDefault) {\n                    reactProps[attrName] = attrValue;\n                } else {\n                    reactProps[attrName] = v;\n                }\n            }\n        }\n        if (typeof window !== \"undefined\") {\n            for(const propName in eventProps){\n                const callback = eventProps[propName];\n                const useCapture = propName.endsWith(\"Capture\");\n                var _ref1;\n                const eventName = ((_ref1 = events == null ? void 0 : events[propName]) !== null && _ref1 !== void 0 ? _ref1 : propName.slice(2).toLowerCase()).slice(0, useCapture ? -7 : void 0);\n                React2.useLayoutEffect({\n                    \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                        const eventTarget = elementRef == null ? void 0 : elementRef.current;\n                        if (!eventTarget || typeof callback !== \"function\") return;\n                        eventTarget.addEventListener(eventName, callback, useCapture);\n                        return ({\n                            \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                                eventTarget.removeEventListener(eventName, callback, useCapture);\n                            }\n                        })[\"createComponent.ReactComponent.useLayoutEffect\"];\n                    }\n                }[\"createComponent.ReactComponent.useLayoutEffect\"], [\n                    elementRef == null ? void 0 : elementRef.current,\n                    callback\n                ]);\n            }\n            React2.useLayoutEffect({\n                \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                    if (elementRef.current === null) return;\n                    const newElemProps = /* @__PURE__ */ new Map();\n                    for(const key in elementProps){\n                        setProperty(elementRef.current, key, elementProps[key]);\n                        prevElemPropsRef.current.delete(key);\n                        newElemProps.set(key, elementProps[key]);\n                    }\n                    for (const [key, _value] of prevElemPropsRef.current){\n                        setProperty(elementRef.current, key, void 0);\n                    }\n                    prevElemPropsRef.current = newElemProps;\n                }\n            }[\"createComponent.ReactComponent.useLayoutEffect\"]);\n        }\n        if (typeof window === \"undefined\" && (elementClass == null ? void 0 : elementClass.getTemplateHTML) && (elementClass == null ? void 0 : elementClass.shadowRootOptions)) {\n            const { mode, delegatesFocus } = elementClass.shadowRootOptions;\n            const templateShadowRoot = React2.createElement(\"template\", {\n                shadowrootmode: mode,\n                shadowrootdelegatesfocus: delegatesFocus,\n                dangerouslySetInnerHTML: {\n                    __html: elementClass.getTemplateHTML(attrs, props)\n                }\n            });\n            reactProps.children = [\n                templateShadowRoot,\n                reactProps.children\n            ];\n        }\n        return React2.createElement(tagName, {\n            ...defaultProps,\n            ...reactProps,\n            ref: React2.useCallback({\n                \"createComponent.ReactComponent.useCallback\": (node)=>{\n                    elementRef.current = node;\n                    if (typeof ref === \"function\") {\n                        ref(node);\n                    } else if (ref !== null) {\n                        ref.current = node;\n                    }\n                }\n            }[\"createComponent.ReactComponent.useCallback\"], [\n                ref\n            ])\n        });\n    }, \"9mplyF7vgg8XUtKXUe3PLSYpH8g=\"));\n    ReactComponent.displayName = displayName !== null && displayName !== void 0 ? displayName : elementClass.name;\n    return ReactComponent;\n}\nfunction setProperty(node, name, value) {\n    var _a;\n    node[name] = value;\n    var _ref;\n    if (value == null && name in ((_ref = (_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) !== null && _ref !== void 0 ? _ref : {})) {\n        node.removeAttribute(name);\n    }\n}\n// dist/react.ts\nvar react_default = createComponent({\n    react: react__WEBPACK_IMPORTED_MODULE_0__,\n    tagName: \"wistia-video\",\n    elementClass: _wistia_video_element_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    toAttributeName (propName) {\n        if (propName === \"muted\") return \"\";\n        if (propName === \"defaultMuted\") return \"muted\";\n        return defaultToAttributeName(propName);\n    }\n});\n /*! Bundled license information:\n\nce-la-react/dist/ce-la-react.js:\n  (**\n   * @license\n   * Copyright 2018 Google LLC\n   * SPDX-License-Identifier: BSD-3-Clause\n   *\n   * Modified version of `@lit/react` for vanilla custom elements with support for SSR.\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/wistia-video-element/dist/react.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/wistia-video-element/dist/wistia-video-element.js":
/*!************************************************************************!*\
  !*** ./node_modules/wistia-video-element/dist/wistia-video-element.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ wistia_video_element_default),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId)\n/* harmony export */ });\n/* harmony import */ var super_media_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! super-media-element */ \"(app-pages-browser)/./node_modules/super-media-element/super-media-element.js\");\nvar _a, _b;\n\nconst templateLightDOM = (_a = globalThis.document) == null ? void 0 : _a.createElement(\"template\");\nif (templateLightDOM) {\n  templateLightDOM.innerHTML = /*html*/\n  `\n  <div class=\"wistia_embed\"></div>\n  `;\n}\nconst templateShadowDOM = (_b = globalThis.document) == null ? void 0 : _b.createElement(\"template\");\nif (templateShadowDOM) {\n  templateShadowDOM.innerHTML = /*html*/\n  `\n  <style>\n    :host {\n      display: inline-block;\n      min-width: 300px;\n      min-height: 150px;\n      position: relative;\n    }\n    ::slotted(.wistia_embed) {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n  <slot></slot>\n  `;\n}\nclass WistiaVideoElement extends super_media_element__WEBPACK_IMPORTED_MODULE_0__.SuperVideoElement {\n  static template = templateShadowDOM;\n  static skipAttributes = [\"src\"];\n  get nativeEl() {\n    var _a2;\n    return ((_a2 = this.api) == null ? void 0 : _a2.elem()) ?? this.querySelector(\"video\");\n  }\n  async load() {\n    var _a2;\n    (_a2 = this.querySelector(\".wistia_embed\")) == null ? void 0 : _a2.remove();\n    if (!this.src) {\n      return;\n    }\n    await new Promise((resolve) => setTimeout(resolve, 50));\n    const MATCH_SRC = /(?:wistia\\.com|wi\\.st)\\/(?:medias|embed)\\/(.*)$/i;\n    const id = this.src.match(MATCH_SRC)[1];\n    const options = {\n      autoPlay: this.autoplay,\n      preload: this.preload ?? \"metadata\",\n      playsinline: this.playsInline,\n      endVideoBehavior: this.loop && \"loop\",\n      chromeless: !this.controls,\n      playButton: this.controls,\n      muted: this.defaultMuted\n    };\n    this.append(templateLightDOM.content.cloneNode(true));\n    const div = this.querySelector(\".wistia_embed\");\n    if (!div.id) div.id = uniqueId(id);\n    div.classList.add(`wistia_async_${id}`);\n    const scriptUrl = \"https://fast.wistia.com/assets/external/E-v1.js\";\n    await loadScript(scriptUrl, \"Wistia\");\n    this.api = await new Promise((onReady) => {\n      globalThis._wq.push({\n        id: div.id,\n        onReady,\n        options\n      });\n    });\n  }\n  async attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === \"controls\") {\n      await this.loadComplete;\n      switch (attrName) {\n        case \"controls\":\n          this.api.bigPlayButtonEnabled(this.controls);\n          this.controls ? this.api.releaseChromeless() : this.api.requestChromeless();\n          break;\n      }\n      return;\n    }\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n  }\n  // Override some methods w/ defaults if the video element is not ready yet when called.\n  // Some methods require the Wistia API instead of the native video element API.\n  get duration() {\n    var _a2;\n    return (_a2 = this.api) == null ? void 0 : _a2.duration();\n  }\n  play() {\n    this.api.play();\n    return new Promise((resolve) => this.addEventListener(\"playing\", resolve));\n  }\n}\nconst loadScriptCache = {};\nasync function loadScript(src, globalName) {\n  if (!globalName) return import(\n    /* webpackIgnore: true */\n    src\n  );\n  if (loadScriptCache[src]) return loadScriptCache[src];\n  if (self[globalName]) return self[globalName];\n  return loadScriptCache[src] = new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.defer = true;\n    script.src = src;\n    script.onload = () => resolve(self[globalName]);\n    script.onerror = reject;\n    document.head.append(script);\n  });\n}\nlet idCounter = 0;\nfunction uniqueId(prefix) {\n  const id = ++idCounter;\n  return `${prefix}${id}`;\n}\nif (globalThis.customElements && !globalThis.customElements.get(\"wistia-video\")) {\n  globalThis.customElements.define(\"wistia-video\", WistiaVideoElement);\n}\nvar wistia_video_element_default = WistiaVideoElement;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93aXN0aWEtdmlkZW8tZWxlbWVudC9kaXN0L3dpc3RpYS12aWRlby1lbGVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ3dEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxrRUFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLEdBQUc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPLEVBQUUsR0FBRztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FdGhhbkxlZS9EZXNrdG9wL0FkdlgvQUktV2F0Y2gtQnVkZHkvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3dpc3RpYS12aWRlby1lbGVtZW50L2Rpc3Qvd2lzdGlhLXZpZGVvLWVsZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9hLCBfYjtcbmltcG9ydCB7IFN1cGVyVmlkZW9FbGVtZW50IH0gZnJvbSBcInN1cGVyLW1lZGlhLWVsZW1lbnRcIjtcbmNvbnN0IHRlbXBsYXRlTGlnaHRET00gPSAoX2EgPSBnbG9iYWxUaGlzLmRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2EuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuaWYgKHRlbXBsYXRlTGlnaHRET00pIHtcbiAgdGVtcGxhdGVMaWdodERPTS5pbm5lckhUTUwgPSAvKmh0bWwqL1xuICBgXG4gIDxkaXYgY2xhc3M9XCJ3aXN0aWFfZW1iZWRcIj48L2Rpdj5cbiAgYDtcbn1cbmNvbnN0IHRlbXBsYXRlU2hhZG93RE9NID0gKF9iID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbmlmICh0ZW1wbGF0ZVNoYWRvd0RPTSkge1xuICB0ZW1wbGF0ZVNoYWRvd0RPTS5pbm5lckhUTUwgPSAvKmh0bWwqL1xuICBgXG4gIDxzdHlsZT5cbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBtaW4td2lkdGg6IDMwMHB4O1xuICAgICAgbWluLWhlaWdodDogMTUwcHg7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgfVxuICAgIDo6c2xvdHRlZCgud2lzdGlhX2VtYmVkKSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIDwvc3R5bGU+XG4gIDxzbG90Pjwvc2xvdD5cbiAgYDtcbn1cbmNsYXNzIFdpc3RpYVZpZGVvRWxlbWVudCBleHRlbmRzIFN1cGVyVmlkZW9FbGVtZW50IHtcbiAgc3RhdGljIHRlbXBsYXRlID0gdGVtcGxhdGVTaGFkb3dET007XG4gIHN0YXRpYyBza2lwQXR0cmlidXRlcyA9IFtcInNyY1wiXTtcbiAgZ2V0IG5hdGl2ZUVsKCkge1xuICAgIHZhciBfYTI7XG4gICAgcmV0dXJuICgoX2EyID0gdGhpcy5hcGkpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZWxlbSgpKSA/PyB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCJ2aWRlb1wiKTtcbiAgfVxuICBhc3luYyBsb2FkKCkge1xuICAgIHZhciBfYTI7XG4gICAgKF9hMiA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi53aXN0aWFfZW1iZWRcIikpID09IG51bGwgPyB2b2lkIDAgOiBfYTIucmVtb3ZlKCk7XG4gICAgaWYgKCF0aGlzLnNyYykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MCkpO1xuICAgIGNvbnN0IE1BVENIX1NSQyA9IC8oPzp3aXN0aWFcXC5jb218d2lcXC5zdClcXC8oPzptZWRpYXN8ZW1iZWQpXFwvKC4qKSQvaTtcbiAgICBjb25zdCBpZCA9IHRoaXMuc3JjLm1hdGNoKE1BVENIX1NSQylbMV07XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGF1dG9QbGF5OiB0aGlzLmF1dG9wbGF5LFxuICAgICAgcHJlbG9hZDogdGhpcy5wcmVsb2FkID8/IFwibWV0YWRhdGFcIixcbiAgICAgIHBsYXlzaW5saW5lOiB0aGlzLnBsYXlzSW5saW5lLFxuICAgICAgZW5kVmlkZW9CZWhhdmlvcjogdGhpcy5sb29wICYmIFwibG9vcFwiLFxuICAgICAgY2hyb21lbGVzczogIXRoaXMuY29udHJvbHMsXG4gICAgICBwbGF5QnV0dG9uOiB0aGlzLmNvbnRyb2xzLFxuICAgICAgbXV0ZWQ6IHRoaXMuZGVmYXVsdE11dGVkXG4gICAgfTtcbiAgICB0aGlzLmFwcGVuZCh0ZW1wbGF0ZUxpZ2h0RE9NLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgICBjb25zdCBkaXYgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIud2lzdGlhX2VtYmVkXCIpO1xuICAgIGlmICghZGl2LmlkKSBkaXYuaWQgPSB1bmlxdWVJZChpZCk7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoYHdpc3RpYV9hc3luY18ke2lkfWApO1xuICAgIGNvbnN0IHNjcmlwdFVybCA9IFwiaHR0cHM6Ly9mYXN0Lndpc3RpYS5jb20vYXNzZXRzL2V4dGVybmFsL0UtdjEuanNcIjtcbiAgICBhd2FpdCBsb2FkU2NyaXB0KHNjcmlwdFVybCwgXCJXaXN0aWFcIik7XG4gICAgdGhpcy5hcGkgPSBhd2FpdCBuZXcgUHJvbWlzZSgob25SZWFkeSkgPT4ge1xuICAgICAgZ2xvYmFsVGhpcy5fd3EucHVzaCh7XG4gICAgICAgIGlkOiBkaXYuaWQsXG4gICAgICAgIG9uUmVhZHksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGFzeW5jIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgaWYgKGF0dHJOYW1lID09PSBcImNvbnRyb2xzXCIpIHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZENvbXBsZXRlO1xuICAgICAgc3dpdGNoIChhdHRyTmFtZSkge1xuICAgICAgICBjYXNlIFwiY29udHJvbHNcIjpcbiAgICAgICAgICB0aGlzLmFwaS5iaWdQbGF5QnV0dG9uRW5hYmxlZCh0aGlzLmNvbnRyb2xzKTtcbiAgICAgICAgICB0aGlzLmNvbnRyb2xzID8gdGhpcy5hcGkucmVsZWFzZUNocm9tZWxlc3MoKSA6IHRoaXMuYXBpLnJlcXVlc3RDaHJvbWVsZXNzKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgfVxuICAvLyBPdmVycmlkZSBzb21lIG1ldGhvZHMgdy8gZGVmYXVsdHMgaWYgdGhlIHZpZGVvIGVsZW1lbnQgaXMgbm90IHJlYWR5IHlldCB3aGVuIGNhbGxlZC5cbiAgLy8gU29tZSBtZXRob2RzIHJlcXVpcmUgdGhlIFdpc3RpYSBBUEkgaW5zdGVhZCBvZiB0aGUgbmF0aXZlIHZpZGVvIGVsZW1lbnQgQVBJLlxuICBnZXQgZHVyYXRpb24oKSB7XG4gICAgdmFyIF9hMjtcbiAgICByZXR1cm4gKF9hMiA9IHRoaXMuYXBpKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmR1cmF0aW9uKCk7XG4gIH1cbiAgcGxheSgpIHtcbiAgICB0aGlzLmFwaS5wbGF5KCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJwbGF5aW5nXCIsIHJlc29sdmUpKTtcbiAgfVxufVxuY29uc3QgbG9hZFNjcmlwdENhY2hlID0ge307XG5hc3luYyBmdW5jdGlvbiBsb2FkU2NyaXB0KHNyYywgZ2xvYmFsTmFtZSkge1xuICBpZiAoIWdsb2JhbE5hbWUpIHJldHVybiBpbXBvcnQoXG4gICAgLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqL1xuICAgIHNyY1xuICApO1xuICBpZiAobG9hZFNjcmlwdENhY2hlW3NyY10pIHJldHVybiBsb2FkU2NyaXB0Q2FjaGVbc3JjXTtcbiAgaWYgKHNlbGZbZ2xvYmFsTmFtZV0pIHJldHVybiBzZWxmW2dsb2JhbE5hbWVdO1xuICByZXR1cm4gbG9hZFNjcmlwdENhY2hlW3NyY10gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHQuZGVmZXIgPSB0cnVlO1xuICAgIHNjcmlwdC5zcmMgPSBzcmM7XG4gICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHJlc29sdmUoc2VsZltnbG9iYWxOYW1lXSk7XG4gICAgc2NyaXB0Lm9uZXJyb3IgPSByZWplY3Q7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmQoc2NyaXB0KTtcbiAgfSk7XG59XG5sZXQgaWRDb3VudGVyID0gMDtcbmZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICBjb25zdCBpZCA9ICsraWRDb3VudGVyO1xuICByZXR1cm4gYCR7cHJlZml4fSR7aWR9YDtcbn1cbmlmIChnbG9iYWxUaGlzLmN1c3RvbUVsZW1lbnRzICYmICFnbG9iYWxUaGlzLmN1c3RvbUVsZW1lbnRzLmdldChcIndpc3RpYS12aWRlb1wiKSkge1xuICBnbG9iYWxUaGlzLmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIndpc3RpYS12aWRlb1wiLCBXaXN0aWFWaWRlb0VsZW1lbnQpO1xufVxudmFyIHdpc3RpYV92aWRlb19lbGVtZW50X2RlZmF1bHQgPSBXaXN0aWFWaWRlb0VsZW1lbnQ7XG5leHBvcnQge1xuICB3aXN0aWFfdmlkZW9fZWxlbWVudF9kZWZhdWx0IGFzIGRlZmF1bHQsXG4gIHVuaXF1ZUlkXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/wistia-video-element/dist/wistia-video-element.js\n"));

/***/ })

}]);